#include <linux/cdev.h>
#include <linux/fs.h>
#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/device.h>
#include <linux/slab.h>
#include <linux/uaccess.h>


unsigned char *pbuffer;
int rd_offset=0;
int wr_offset=0;
int buflen=0;

dev_t pdevid;
int ndevices=1;
struct cdev cdev;

struct device *pdev;   //global
struct class *pclass;  //flobal



int pseudo_open(struct inode* inode, struct file* file)
{
  printk("Pseudo--open menthod\n");
  return 0;
}


int pseudo_close(struct inode* inode, struct file* file)
{
  printk("Pseudo--release method\n");
  return 0;
}

ssize_t pseudo_read(struct file* file, char __user* buf, size_t size, loff_t* off )
{
  printk("Pseudo---read method\n");
  return 0;
}

ssize_t pseudo_write(struct file* file, const  char __user* buf, size_t size, loff_t* off )
{
  printk("Pseudo---write 
  return -ENOSPC;
}


struct file_operations fops = {
        .open    = pseudo_open,
        .release = pseudo_close,
        .write   = pseudo_write,
        .read    = pseudo_read
        };
        


// init



static int __init psuedo_init(void)
{
 int ret;
 int i=0;
 
 pclass = class_create(THIS_MODULE, "pseudo_class");
 
 ret = alloc_chrdev_region(&pdevid, 0, ndevices, "pseudo_sample");
 
 pdev = device_create(pclass, NULL, pdevid, NULL, "psample%d", i);
 
pbuffer = kmalloc(MAX_SIZE, GEP_KERNEL);

 cdev_init(&cdev, &fops);
 kobject_set_name(&cdev.kobj, "pdevice%d", i);
 ret = cdev_add(&cdev, pdevid, 1);

 

 if(ret)
  {
    printk("Pseudo: Failed to register driver \n");
    return -EINVAL;
  }
 
 printk("Successfully registered, major=%d, minor=%d\n", MAJOR(pdevid), MINOR(pdevid));
 printk("Pseudo Driver Sample...welcome\n");
 return 0;
}





// In exit

static void __exit psuedo_exit(void)
{

 
 kfree(pbuffer);
 unregister_chrdev_region(pdevid, ndevices);
 printk("Pseudo Driver Sample...Bye\n");
 cdev_del(&cdev);
 device_destroy(pclass, pdevid);
 class_destroy(pclass);
}





module_init(psuedo_init);
module_exit(psuedo_exit);
MODULE_LICENSE("GPL");
MODULE_AUTHOR("ABHISHEK MISHRA");
MODULE_DESCRIPTION("Parameter demo Module");


